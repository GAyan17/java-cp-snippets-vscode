{
  "Get Minimum long": {
    "scope": "java",
    "prefix": "minlong",
    "body": [
      "private static long getMin(long a, long b) {",
      "\treturn a < b ? a : b;",
      "}"
    ],
    "description": "Java CP get minimum long"
  },
  "Get Minimum int": {
    "scope": "java",
    "prefix": "minint",
    "body": [
      "private static int getMin(int a, int b) {",
      "\treturn a < b ? a : b;",
      "}"
    ],
    "description": "Java CP get minimum int"
  },
  "Get Maximum long": {
    "scope": "java",
    "prefix": "maxlong",
    "body": [
      "private static long getMax(long a, long b) {",
      "\treturn a > b ? a : b;",
      "}"
    ],
    "description": "Java CP get maximum long"
  },
  "Get Maximum int": {
    "scope": "java",
    "prefix": "maxint",
    "body": [
      "private static int getMax(int a, int b) {",
      "\treturn a > b ? a : b;",
      "}"
    ],
    "description": "Java CP get maximum int"
  },
  "if whole number": {
    "scope": "java",
    "prefix": "ifwhole",
    "body": ["if(${1:a} % ${2:b} == 0) {", "\t${3}", "}"],
    "description": "Java CP if whole number"
  },
  "if-else whole number": {
    "scope": "java",
    "prefix": "ifelse_whole",
    "body": ["if(${1:a} % ${2:b} == 0) {", "\t${3}", "} else {", "\t${4}", "}"],
    "description": "Java CP check whole number if-else"
  },
  "Get Maximum int Array": {
    "scope": "java",
    "prefix": "array_maxint",
    "body": [
      "private static int getMaxArrInt(int[] arr) {",
      "\tint max = Integer.MIN_VALUE;",
      "\tfor(int i = 0; i < arr.length; i++) {",
      "\t\tif(max < arr[i]) {",
      "\t\t\tmax = arr[i];",
      "\t\t}",
      "\t}",
      "}"
    ],
    "description": "Java CP get maximum int array"
  },
  "Get Maximum long Array": {
    "scope": "java",
    "prefix": "array_maxlong",
    "body": [
      "private static long getMaxArrLong(long[] arr) {",
      "\tlong max = Long.MIN_VALUE;",
      "\tfor(int i = 0; i < arr.length; i++) {",
      "\t\tif(max < arr[i]) {",
      "\t\t\tmax = arr[i];",
      "\t\t}",
      "\t}",
      "}"
    ],
    "description": "Java CP get maximum long array"
  },
  "Get Minimum int Array": {
    "scope": "java",
    "prefix": "array_minint",
    "body": [
      "private static int getMinArrInt(int[] arr) {",
      "\tint min = Integer.MAX_VALUE;",
      "\tfor(int i = 0; i < arr.length; i++) {",
      "\t\tif(min > arr[i]) {",
      "\t\t\tmin = arr[i];",
      "\t\t}",
      "\t}",
      "}"
    ],
    "description": "Java CP get minimum int array"
  },
  "Get Minimum long Array": {
    "scope": "java",
    "prefix": "array_minlong",
    "body": [
      "private static int getMinArrLong(long[] arr) {",
      "\tlong min = Long.MAX_VALUE;",
      "\tfor(int i = 0; i < arr.length; i++) {",
      "\t\tif(min > arr[i]) {",
      "\t\t\tmin = arr[i];",
      "\t\t}",
      "\t}",
      "}"
    ],
    "description": "Java CP get minimum long array"
  },
  "Get Sum Array int": {
    "scope": "java",
    "prefix": "array_sumint",
    "body": [
      "private static long getSum(int[] arr) {",
      "\tlong sum = 0",
      "\tfor(int i = 0; i < arr.length; i++) {",
      "\t\tsum += arr[i];",
      "\t}",
      "\treturn sum;",
      "}"
    ],
    "description": "Java CP get sum int array"
  },
  "Get Sum Array long": {
    "scope": "java",
    "prefix": "array_sumlong",
    "body": [
      "private static long getSum(long[] arr) {",
      "\tlong sum = 0",
      "\tfor(int i = 0; i < arr.length; i++) {",
      "\t\tsum += arr[i];",
      "\t}",
      "\treturn sum;",
      "}"
    ],
    "description": "Java CP get sum int array"
  },
  "Get Sum ArrayList Long": {
    "scope": "java",
    "prefix": "list_sumlong",
    "body": [
      "private static Long getSumList(ArrayList<Long> list) {",
      "\tLong sum = 0",
      "\tfor(Long a : list) {",
      "\t\tsum += a;",
      "\t}",
      "\treturn sum;",
      "}"
    ],
    "description": "Java CP get sum int array"
  },
  "Get Prefix Sum Array int": {
    "scope": "java",
    "prefix": "prefixsum_arrayint",
    "body": [
      "private static long[] getPrefixSum(int[] arr) {",
      "\tlong[] sum = new long[arr.length];",
      "\tsum[0] = arr[0];",
      "\tfor(int i = 1; i < arr.length; i++) {",
      "\t\tsum[i] = sum[i - 1] + arr[i];",
      "\t}",
      "\treturn sum;",
      "}"
    ],
    "description": "Java CP get prefix sum int array"
  },
  "Get Prefix Sum Array long": {
    "scope": "java",
    "prefix": "prefixsum_arraylong",
    "body": [
      "private static long[] getPrefixSum(long[] arr) {",
      "\tlong[] sum = new long[arr.length];",
      "\tsum[0] = arr[0];",
      "\tfor(int i = 1; i < arr.length; i++) {",
      "\t\tsum[i] = sum[i - 1] + arr[i];",
      "\t}",
      "\treturn sum;",
      "}"
    ],
    "description": "Java CP get prefix sum long array"
  },
  "Get Prefix Sum ArrayList Long": {
    "scope": "java",
    "prefix": "prefixsum_list_long",
    "body": [
      "private static ArrayList<Long> getPrefixSum(ArrayList<Long> arr) {",
      "\tArrayList<Long> sum = new ArrayList<>(arr.size());",
      "\tsum.add(arr.get(0));",
      "\tfor(int i = 1; i < arr.size(); i++) {",
      "\t\tsum.add(sum.get(i - 1) + arr.get(i));",
      "\t}",
      "\treturn sum;",
      "}"
    ],
    "description": "Java CP get prefix sum long arraylist"
  },
  "Get Prefix Sum ArrayList int": {
    "scope": "java",
    "prefix": "prefixsum_list_int",
    "body": [
      "private static ArrayList<Integer> getPrefixSum(ArrayList<Integer> arr) {",
      "\tArrayList<Integer> sum = new ArrayList<>(arr.size());",
      "\tsum.add(arr.get(0));",
      "\tfor(int i = 1; i < arr.size(); i++) {",
      "\t\tsum.add(sum.get(i - 1) + arr.get(i));",
      "\t}",
      "\treturn sum;",
      "}"
    ],
    "description": "Java CP get prefix sum long arraylist"
  },
  "Custom Pair Class for int": {
    "scope": "java",
    "prefix": "pairint",
    "body": [
      "class PairInt {",
      "\tint first, second;",
      "\tPairInt() {",
      "\t}",
      "\tPairInt(int first, int second) {",
      "\t\tthis.first = first;",
      "\t\tthis.second = second;",
      "\t}",
      "}"
    ],
    "description": "Java Custom Pair class for int"
  },
  "Custom Pair Class for long": {
    "scope": "java",
    "prefix": "pairlong",
    "body": [
      "class PairLong {",
      "\tlong first, second;",
      "\tPairLong() {",
      "\t}",
      "\tPairLong(long first, long second) {",
      "\t\tthis.first = first;",
      "\t\tthis.second = second;",
      "\t}",
      "}"
    ],
    "description": "Java Custom Pair class for long"
  },
  "Ans Printing": {
    "scope": "java",
    "prefix": "ans",
    "body": ["final static StringBuilder ans = new StringBuilder();"],
    "description": "Java CP ans printing StringBuilders"
  },
  "time calculate": {
    "scope": "java",
    "prefix": "time_calc",
    "body": [
      "long startTime = System.currentTimeMillis();",
      "$0",
      "long endTime = System.currentTimeMillis();",
      "System.out.println(\"Time: \" + (endTime - startTime) + \" ms\");"
    ],
    "description": "Java CP Time check"
  },
  "BufferedReader Initialiaze": {
    "scope": "java",
    "prefix": "bufferedreader_initialize",
    "body": [
      "final static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));"
    ],
    "description": "Java BufferedReader Initialize"
  },
  "int Array Input": {
    "scope": "java",
    "prefix": "input_array_int",
    "body": [
      "${1:array} = Arrays.stream(br.readLine().split(\" \")).mapToInt(Integer::valueOf).toArray();",
      "$0"
    ],
    "description": "Java Int Array Input"
  },
  "long Array Input": {
    "scope": "java",
    "prefix": "input_array_long",
    "body": [
      "${1:array} = Arrays.stream(br.readLine().split(\" \")).mapToLong(Long::valueOf).toArray();",
      "$0"
    ],
    "description": "Java Long Array Input"
  },
  "List Intilize int ": {
    "scope": "java",
    "prefix": "list_intialize_int",
    "body": ["List<Integer> ${1:aList} = new ArrayList<>();"],
    "description": "Java Integer ArrayList Initialize"
  },
  "List Intilize long ": {
    "scope": "java",
    "prefix": "list_intialize_long",
    "body": ["List<Long> ${1:aList} = new ArrayList<>();"],
    "description": "Java Integer ArrayList Initialize"
  },
  "Integer List Input": {
    "scope": "java",
    "prefix": "list_input_int",
    "body": [
      "${1:aList} = Arrays.stream(br.readLine().split(\" \")).map(Integer::valueOf).collect(Collectors.toList());",
      "$0"
    ],
    "description": "Java Integer ArrayList Input"
  },
  "Long List Input": {
    "scope": "java",
    "prefix": "list_input_long",
    "body": [
      "${1:aList} = Arrays.stream(br.readLine().split(\" \")).map(Long::valueOf).collect(Collectors.toList());",
      "$0"
    ],
    "description": "Java Long ArrayList Input"
  },
  "FastReader Initialiaze": {
    "scope": "java",
    "prefix": "fastreader_initialize",
    "body": ["final FastReader fr = new FastReader(System.in);"],
    "description": "Java Reader Initialize"
  },
  "test case input buffer": {
    "scope": "java",
    "prefix": "testcaseinputbuffer",
    "body": [
      "for (int test = Integer.parseInt(br.readLine()); test > 0; test--) {",
      "\t$0",
      "}"
    ],
    "description": "Java Test Case Input"
  },
  "FastReader TestCase Input": {
    "scope": "java",
    "prefix": "testcasefastreader",
    "body": ["for (int test = fr.nextInt(); test > 0; test--) {", "\t$0", "}"],
    "description": "Java Test Case Input"
  },
  "fast java output println": {
    "scope": "java",
    "prefix": "pout",
    "body": ["out.println(${0});"],
    "description": "Java Fast Output println"
  },
  "FastPrinter Initialization": {
    "prefix": "fastprinter initialize",
    "body": [
      "final FastPrinter fp = new FastPrinter(System.out);",
      "${0}",
      "fp.close();"
    ],
    "description": "FastPrinter Initialization"
  },
  "FastReader Class": {
    "prefix": "fastreader",
    "body": [
      "class FastReader {",
      "    final private int BUFFER_SIZE = 1 << 17;",
      "    private DataInputStream din;",
      "    private byte[] buffer;",
      "    private int bufferPointer, bytesRead;",
      "",
      "    public FastReader(InputStream in) {",
      "        din = new DataInputStream(in);",
      "        buffer = new byte[BUFFER_SIZE];",
      "        bufferPointer = bytesRead = 0;",
      "    }",
      "",
      "    public FastReader(String file_name) throws IOException {",
      "        din = new DataInputStream(new FileInputStream(file_name));",
      "        buffer = new byte[BUFFER_SIZE];",
      "        bufferPointer = bytesRead = 0;",
      "    }",
      "",
      "    public int nextInt() throws IOException {",
      "        int ret = 0;",
      "        byte c = read();",
      "",
      "        while (c <= ' ')",
      "            c = read();",
      "        boolean neg = (c == '-');",
      "",
      "        if (neg)",
      "            c = read();",
      "",
      "        do {",
      "            ret = ret * 10 + c - '0';",
      "        } while ((c = read()) >= '0' && c <= '9');",
      "",
      "        if (neg)",
      "            return -ret;",
      "        return ret;",
      "    }",
      "",
      "    public long nextLong() throws IOException {",
      "        long ret = 0;",
      "        byte c = read();",
      "        while (c <= ' ')",
      "            c = read();",
      "        boolean neg = (c == '-');",
      "        if (neg)",
      "            c = read();",
      "        do {",
      "            ret = ret * 10 + c - '0';",
      "        } while ((c = read()) >= '0' && c <= '9');",
      "        if (neg)",
      "            return -ret;",
      "        return ret;",
      "    }",
      "",
      "    public double nextDouble() throws IOException {",
      "        double ret = 0, div = 1;",
      "        byte c = read();",
      "        while (c <= ' ')",
      "            c = read();",
      "        boolean neg = (c == '-');",
      "        if (neg)",
      "            c = read();",
      "",
      "        do {",
      "            ret = ret * 10 + c - '0';",
      "        } while ((c = read()) >= '0' && c <= '9');",
      "",
      "        if (c == '.') {",
      "            while ((c = read()) >= '0' && c <= '9') {",
      "                ret += (c - '0') / (div *= 10);",
      "            }",
      "        }",
      "",
      "        if (neg)",
      "            return -ret;",
      "        return ret;",
      "    }",
      "",
      "    public int[] nextIntArray(int size) throws IOException {",
      "        int[] arr = new int[size];",
      "        for (int i = 0; i < size; i++) {",
      "            arr[i] = nextInt();",
      "        }",
      "        return arr;",
      "    }",
      "",
      "    public long[] nextLongArray(int size) throws IOException {",
      "        long[] arr = new long[size];",
      "        for (int i = 0; i < size; i++) {",
      "            arr[i] = nextLong();",
      "        }",
      "        return arr;",
      "    }",
      "",
      "    public int[][] nextIntMatrix(int n, int m) throws IOException {",
      "        int[][] arr = new int[n][m];",
      "        for (int i = 0; i < n; i++) {",
      "            arr[i] = nextIntArray(m);",
      "        }",
      "        return arr;",
      "    }",
      "",
      "    public long[][] nextLongMatrix(int n, int m) throws IOException {",
      "        long[][] arr = new long[n][m];",
      "        for (int i = 0; i < n; i++) {",
      "            arr[i] = nextLongArray(m);",
      "        }",
      "        return arr;",
      "    }",
      "",
      "    public ArrayList<Integer> nextIntList(int size) throws IOException {",
      "        ArrayList<Integer> arrayList = new ArrayList<>(size);",
      "        for (int i = 0; i < size; i++) {",
      "            arrayList.add(nextInt());",
      "        }",
      "        return arrayList;",
      "    }",
      "",
      "    public ArrayList<Long> nextLongList(int size) throws IOException {",
      "        ArrayList<Long> arrayList = new ArrayList<>(size);",
      "        for (int i = 0; i < size; i++) {",
      "            arrayList.add(nextLong());",
      "        }",
      "        return arrayList;",
      "    }",
      "",
      "    private void fillBuffer() throws IOException {",
      "        bytesRead = din.read(buffer, bufferPointer = 0, BUFFER_SIZE);",
      "        if (bytesRead == -1)",
      "            buffer[0] = -1;",
      "    }",
      "",
      "    private byte read() throws IOException {",
      "        if (bufferPointer == bytesRead)",
      "            fillBuffer();",
      "        return buffer[bufferPointer++];",
      "    }",
      "",
      "    public void close() throws IOException {",
      "        if (din == null)",
      "            return;",
      "        din.close();",
      "    }",
      "}"
    ],
    "description": "FastReader Class"
  },
  "FastPrinter Class": {
    "prefix": "fastprinter",
    "body": [
      "class FastPrinter {",
      "    final private PrintWriter out;",
      "",
      "    FastPrinter(OutputStream out) {",
      "        this.out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(out)));",
      "    }",
      "",
      "    public void printlnArray(int[] arr) {",
      "        for (int i : arr) {",
      "            out.println(i);",
      "        }",
      "    }",
      "",
      "    public void printlnArray(long[] arr) {",
      "        for (long i : arr) {",
      "            out.println(i);",
      "        }",
      "    }",
      "",
      "    public void printArray(int[] arr) {",
      "        for (int i : arr) {",
      "            out.print(i + \" \");",
      "        }",
      "        out.println();",
      "    }",
      "",
      "    public void printArray(long[] arr) {",
      "        for (long i : arr) {",
      "            out.print(i + \" \");",
      "        }",
      "        out.println();",
      "    }",
      "",
      "    public void println() {",
      "        out.println();",
      "    }",
      "",
      "    public void println(String s) {",
      "        out.println(s);",
      "    }",
      "",
      "    public void println(int s) {",
      "        out.println(s);",
      "    }",
      "",
      "    public void println(long s) {",
      "        out.println(s);",
      "    }",
      "",
      "    public void println(double s) {",
      "        out.println(s);",
      "    }",
      "",
      "    public void println(Object a) {",
      "        out.println(a);",
      "    }",
      "",
      "    public void print(String s) {",
      "        out.print(s);",
      "    }",
      "",
      "    public void print(Object a) {",
      "        out.print(a);",
      "    }",
      "",
      "    public void flush() {",
      "        out.flush();",
      "    }",
      "",
      "    public void close() {",
      "        out.close();",
      "    }",
      "}"
    ],
    "description": "FastPrinter Class"
  },
  "Sieve Generation Code": {
    "prefix": "sieve",
    "body": [
      "private static boolean sieve = new boolean[1_000_000 + 1];",
      "",
      "private static void initializeSieve() {",
      "        Arrays.fill(sieve, true);",
      "        for (int i = 2; i * i < sieve.length; i++) {",
      "            if (sieve[i]) {",
      "                for (int j = i * i; j < sieve.length; j += i) {",
      "                    sieve[j] = false;",
      "                }",
      "            }",
      "        }",
      "    }"
    ],
    "description": "Sieve Generation Code"
  },
  "Graphs": {
    "prefix": "graph",
    "body": [
      "static class Graph {",
      "        int V;",
      "        int[][] adj;",
      "        Graph(int v) {",
      "            this.V = v;",
      "            adj = new int[this.V][this.V];",
      "            for(int[] a : adj) {",
      "                Arrays.fill(a, 0);",
      "            }",
      "        }",
      "        ",
      "        public void addEdge(int u, int v) {",
      "            adj[u][v] = 1;",
      "            adj[v][u] = 1;",
      "        }",
      "        ",
      "        public void printGraph() {",
      "            for(int i = 0; i < this.V; i++) {",
      "                for(int j = 0; j < this.V; j++) {",
      "                    System.out.print(adj[i][j] + \" \");",
      "                }",
      "                System.out.println();",
      "            }",
      "        }",
      "        ",
      "        private boolean checkBipartiteUtil(int src, int[] colorArr) {",
      "            colorArr[src] = 1;",
      "            LinkedList<Integer> q = new LinkedList<>();",
      "            q.add(src);",
      "            while(q.size() != 0) {",
      "                int u = q.poll();",
      "                ",
      "                if(adj[u][u] == 1) return false;",
      "                ",
      "                for(int v = 0; v < this.V; v++) {",
      "                    if(adj[u][v] == 1 && colorArr[v] == -1) {",
      "                        colorArr[v] = 1 - colorArr[u];",
      "                        q.add(v);",
      "                    } else if(adj[u][v] == 1 && colorArr[v] == colorArr[u]) return false;",
      "                }",
      "            }",
      "            for(int i = 0; i < colorArr.length; i++) {",
      "                System.out.print(colorArr[i] + \" \");",
      "            }",
      "            System.out.println();",
      "            return true;",
      "        }",
      "        ",
      "        public boolean checkBipartite() {",
      "            int[] colorArr = new int[this.V];",
      "            Arrays.fill(colorArr, -1);",
      "            for(int i = 0; i < this.V; i++) {",
      "                if(colorArr[i] == -1) {",
      "                    if(!checkBipartiteUtil(i, colorArr))",
      "                        return false;",
      "                }",
      "            }",
      "            return true;",
      "        }",
      "    }"
    ],
    "description": "Graphs"
  },
  "Main Method CP": {
    "prefix": "cpmain",
    "body": [
      "public static void main(String[] args) {",
      "        try {",
      "            long startTime = System.currentTimeMillis();",
      "",
      "            final FastReader fr = new FastReader();",
      "            final FastPrinter fp = new FastPrinter();",
      "",
      "            long endTime = System.currentTimeMillis();",
      "            if (System.getProperty(\"ONLINE_JUDGE\") == null) {",
      "                fp.println(\"Time: \" + (endTime - startTime) + \" ms\");",
      "            }",
      "",
      "            fp.close();",
      "        } catch (Exception e) {",
      "            e.printStackTrace();",
      "        }",
      "    }"
    ],
    "description": "Main Method CP"
  },
  "Main Method CP Buffer": {
    "prefix": "cpmainbuffer",
    "body": [
      "public static void main(String[] args) {",
      "        try {",
      "            long startTime = System.currentTimeMillis();",
      "            final FastPrinter fp = new FastPrinter();",
      "            // Write code here---",
      "",
      "            long endTime = System.currentTimeMillis();",
      "            if (System.getProperty(\"ONLINE_JUDGE\") == null) {",
      "                fp.println(\"Time: \" + (endTime - startTime) + \" ms\");",
      "            }",
      "",
      "            fp.close();",
      "        } catch (Exception e) {",
      "            e.printStackTrace();",
      "        }",
      "    }"
    ],
    "description": "Main Method CP Buffer"
  }
}
